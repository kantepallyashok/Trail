name: Build, Deploy to AWS ECR, ECS and Terraform Deployment

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 863518440386
  IMAGE_NAME: zomato
  ECS_CLUSTER: zomato-cluster
  ECS_SERVICE: zomato-service
  TASK_DEFINITION: zomato-task

jobs:
  # First Job: Build and Deploy to AWS ECR and ECS
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Get default VPC ID
      - name: Get default VPC ID
        id: vpc_id
        run: |
          export VPC_ID=$(aws ec2 describe-vpcs --filters Name=isDefault,Values=true --query 'Vpcs[0].VpcId' --output text --region $AWS_REGION)
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV

      # Get default Subnet IDs for the VPC
      - name: Get default Subnet IDs
        id: subnet_ids
        run: |
          export SUBNET_IDS=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=$VPC_ID --query 'Subnets[*].SubnetId' --output text --region $AWS_REGION)
          echo "SUBNET_IDS=$SUBNET_IDS" >> $GITHUB_ENV

      # Check if the ECR repository exists, if not create it
      - name: Create ECR Repository if not exists
        run: |
          aws ecr describe-repositories --repository-names $IMAGE_NAME --region $AWS_REGION || aws ecr create-repository --repository-name $IMAGE_NAME --region $AWS_REGION

      # Build Docker image
      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_NAME:latest .

      # Authenticate Docker to AWS ECR
      - name: Authenticate Docker to AWS ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      # Tag Docker image
      - name: Tag Docker Image
        run: |
          docker tag $IMAGE_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:latest

      # Push Docker image to AWS ECR
      - name: Push Docker image to AWS ECR
        run: |
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:latest

  # Second Job: Terraform Deployment (runs after the Build and Deploy job)
  terraform-deploy:
    runs-on: ubuntu-latest
    needs: build-and-deploy  # This ensures the Terraform job runs only after the previous one finishes successfully

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Initialize Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      # Plan Terraform changes
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./terraform

      # Apply Terraform changes
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform
      # Get ECS Service Details to extract the IP address or ALB URL
      - name: Get ECS Service IP or ALB URL
        run: |
          SERVICE_ARN=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].serviceArn' --output text)
          
          # Check if service has a load balancer and retrieve its DNS name
          ALB_DNS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].loadBalancers[0].dnsName' --output text)
          
          if [ "$ALB_DNS" != "None" ]; then
            echo "ALB DNS: $ALB_DNS"
            echo "ALB_DNS=$ALB_DNS" >> $GITHUB_ENV
          else
            # Retrieve the IP if not using ALB, check the ENI (Elastic Network Interface) for Fargate tasks
            IP_ADDRESS=$(aws ecs describe-tasks --cluster $ECS_CLUSTER --tasks $(aws ecs list-tasks --cluster $ECS_CLUSTER --service-name $ECS_SERVICE --query 'taskArns' --output text) --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
            
            if [ "$IP_ADDRESS" != "None" ]; then
              IP=$(aws ec2 describe-network-interfaces --network-interface-ids $IP_ADDRESS --query 'NetworkInterfaces[0].PrivateIpAddress' --output text)
              echo "ECS Service IP: $IP"
              echo "ECS_IP=$IP" >> $GITHUB_ENV
            fi
          fi
      
