name: Build and Deploy to AWS ECR and ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 863518440386
  IMAGE_NAME: zomato
  ECS_CLUSTER: zomato-cluster
  ECS_SERVICE: zomato-service
  TASK_DEFINITION: zomato-task

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Get default VPC ID
      - name: Get default VPC ID
        id: vpc_id
        run: |
          export VPC_ID=$(aws ec2 describe-vpcs --filters Name=isDefault,Values=true --query 'Vpcs[0].VpcId' --output text --region $AWS_REGION)
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV

      # Get default Subnet IDs for the VPC
      - name: Get default Subnet IDs
        id: subnet_ids
        run: |
          # Get Subnet IDs as a space-separated list
          export SUBNET_IDS=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=$VPC_ID --query 'Subnets[*].SubnetId' --output text --region $AWS_REGION)
          echo "SUBNET_IDS=$SUBNET_IDS" >> $GITHUB_ENV


      # Check if the ECR repository exists, if not create it
      - name: Create ECR Repository if not exists
        run: |
          aws ecr describe-repositories --repository-names $IMAGE_NAME --region $AWS_REGION || aws ecr create-repository --repository-name $IMAGE_NAME --region $AWS_REGION

      # Build Docker image
      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_NAME:latest .

      # Tag Docker image
      - name: Tag Docker Image
        run: |
          docker tag $IMAGE_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:latest

      # Push Docker image to AWS ECR
      - name: Push Docker image to AWS ECR
        run: |
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:latest

      # Trigger Terraform Workflow (This step triggers another workflow file)
      - name: Trigger Terraform Workflow
        uses: actions/github-script@v6
        with:
          script: |
            const { execSync } = require('child_process');
            execSync('gh workflow run tf.yml', { stdio: 'inherit' });
