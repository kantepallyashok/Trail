name: Build and Deploy to AWS ECR and ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 863518440386
  IMAGE_NAME: zomato
  ECS_CLUSTER: zomato-cluster
  ECS_SERVICE: zomato-service
  TASK_DEFINITION: zomato-task

jobs:
  # Job 1: Checkout Code
  checkout-code:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

  # Job 2: Configure AWS Credentials
  configure-aws:
    runs-on: ubuntu-latest
    needs: checkout-code  # This job depends on the checkout-code job

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

  # Job 3: Get Default VPC ID
  get-vpc-id:
    runs-on: ubuntu-latest
    needs: configure-aws  # This job depends on the configure-aws job

    steps:
      - name: Get default VPC ID
        id: vpc_id
        run: |
          export VPC_ID=$(aws ec2 describe-vpcs --filters Name=isDefault,Values=true --query 'Vpcs[0].VpcId' --output text --region $AWS_REGION)
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV

  # Job 4: Get Default Subnet IDs
  get-subnet-ids:
    runs-on: ubuntu-latest
    needs: get-vpc-id  # This job depends on the get-vpc-id job

    steps:
      - name: Get default Subnet IDs
        id: subnet_ids
        run: |
          export SUBNET_IDS=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=$VPC_ID --query 'Subnets[*].SubnetId' --output text --region $AWS_REGION)
          echo "SUBNET_IDS=$SUBNET_IDS" >> $GITHUB_ENV

  # Job 5: Create ECR Repository
  create-ecr-repo:
    runs-on: ubuntu-latest
    needs: get-subnet-ids  # This job depends on the get-subnet-ids job

    steps:
      - name: Create ECR Repository if not exists
        run: |
          aws ecr describe-repositories --repository-names $IMAGE_NAME --region $AWS_REGION || aws ecr create-repository --repository-name $IMAGE_NAME --region $AWS_REGION

  # Job 6: Build Docker Image
  build-docker-image:
    runs-on: ubuntu-latest
    needs: create-ecr-repo  # This job depends on the create-ecr-repo job

    steps:
      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_NAME:latest .

  # Job 7: Authenticate Docker to AWS ECR
  authenticate-docker:
    runs-on: ubuntu-latest
    needs: build-docker-image  # This job depends on the build-docker-image job

    steps:
      - name: Authenticate Docker to AWS ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

  # Job 8: Tag Docker Image
  tag-docker-image:
    runs-on: ubuntu-latest
    needs: authenticate-docker  # This job depends on the authenticate-docker job

    steps:
      - name: Tag Docker Image
        run: |
          docker tag $IMAGE_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:latest

  # Job 9: Push Docker Image to AWS ECR
  push-docker-image:
    runs-on: ubuntu-latest
    needs: tag-docker-image  # This job depends on the tag-docker-image job

    steps:
      - name: Push Docker image to AWS ECR
        run: |
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:latest

  # Job 10: Trigger Terraform Workflow
  trigger-terraform-workflow:
    runs-on: ubuntu-latest
    needs: push-docker-image  # This job depends on the push-docker-image job

    steps:
      - name: Trigger Terraform Workflow
        uses: actions/github-script@v6
        with:
          script: |
            const { execSync } = require('child_process');
            execSync('gh workflow run tf.yml', { stdio: 'inherit' });
